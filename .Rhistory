bins
source('~/Develop/R/rTrade/R/Scratchbook4.R')
rTrade$getAction()
source('~/Develop/R/rTrade/R/Scratchbook4.R')
rTrade$getAction()
rTrade$getAction()
rTrade$getAction()
rTrade$getAction()
rTrade$getAction()
rTrade$getAction()
source("~/Develop/R/rBackTesting/R/BinStrategies.R")
source("~/Develop/R/rBackTesting/R/BuyStrategies.R")
source("~/Develop/R/rBackTesting/R/SellStrategies.R")
source("~/Develop/R/rBackTesting/R/Win.R")
require(rChange)
require(rQuant)
require(tidyverse)
require(dplyr)
require(odbc)
require(lubridate)
'%ni%' <- Negate('%in%')
connection <- DBI::dbConnect(odbc::odbc(), "cryptocompare")
#datA <- tbl(connection, "cryptocompare_histoDay")
datA <- tbl(connection, "day")
#datA %>% filter(time>1529533355) %>%  collect() -> dataHistorical
#datA %>%  filter(exchange == "Cryptopia", currency == "BTC") %>% distinct() %>% collect() -> dataHistorical
datA %>%  filter(exchange == "Binance", currency == "BTC") %>% distinct() %>% collect() -> dataHistorical
datA %>% filter(time > 1549549822) %>% collect()-> dataHistoricalF
rQuant <- init_rQuant()
#data <- rQuant$bollingerBands$calculate(dataHistorical, 12, 1, TRUE)
data <- rQuant$candlesticks$calculate(dataHistoricalF)
asc <- function(a) {
allAsc <- TRUE
for (i in 1:(length(a)-1)) {
if(a[i] > a[i+1]) {
allAsc <- FALSE
}
}
return(allAsc)
}
data$ascSell <- rollapply(data$open, width=2, FUN = asc, fill = NA, align = "right")
data$ascBuy <- rollapply(data$open, width=3, FUN = asc, fill = NA, align = "right" )
data <- na.omit(data)
windowSize = 12
tradeBookCostRatio = 0
binStrategy <- binStrategies$distributingMeanBinStrategy
buyStrategy <- buyStrategies$cc$hammerBuyStrategy
sellStrategy <- sellStrategies$cc$hammerSellStrategy
numberOfBins = 70
initialInvestment = 1
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 10
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 5
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 15
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 20
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 25
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 30
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 35
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 40
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 45
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 50
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 55
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 60
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 120
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 90
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 35
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 33
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 30
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 37
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 36
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 35
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 34
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 33
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
numberOfBins = 34
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
datA %>% filter(time > 1546871422) %>% collect()-> dataHistoricalF
rQuant <- init_rQuant()
#data <- rQuant$bollingerBands$calculate(dataHistorical, 12, 1, TRUE)
data <- rQuant$candlesticks$calculate(dataHistoricalF)
asc <- function(a) {
allAsc <- TRUE
for (i in 1:(length(a)-1)) {
if(a[i] > a[i+1]) {
allAsc <- FALSE
}
}
return(allAsc)
}
data$ascSell <- rollapply(data$open, width=2, FUN = asc, fill = NA, align = "right")
data$ascBuy <- rollapply(data$open, width=3, FUN = asc, fill = NA, align = "right" )
data <- na.omit(data)
windowSize = 12
tradeBookCostRatio = 0
binStrategy <- binStrategies$distributingMeanBinStrategy
buyStrategy <- buyStrategies$cc$hammerBuyStrategy
sellStrategy <- sellStrategies$cc$hammerSellStrategy
numberOfBins = 34
initialInvestment = 1
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
datA %>% filter(time > 1544193022) %>% collect()-> dataHistoricalF
rQuant <- init_rQuant()
#data <- rQuant$bollingerBands$calculate(dataHistorical, 12, 1, TRUE)
data <- rQuant$candlesticks$calculate(dataHistoricalF)
asc <- function(a) {
allAsc <- TRUE
for (i in 1:(length(a)-1)) {
if(a[i] > a[i+1]) {
allAsc <- FALSE
}
}
return(allAsc)
}
data$ascSell <- rollapply(data$open, width=2, FUN = asc, fill = NA, align = "right")
data$ascBuy <- rollapply(data$open, width=3, FUN = asc, fill = NA, align = "right" )
data <- na.omit(data)
windowSize = 12
tradeBookCostRatio = 0
binStrategy <- binStrategies$distributingMeanBinStrategy
buyStrategy <- buyStrategies$cc$hammerBuyStrategy
sellStrategy <- sellStrategies$cc$hammerSellStrategy
numberOfBins = 34
initialInvestment = 1
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
source("~/Develop/R/rBackTesting/R/BinStrategies.R")
source("~/Develop/R/rBackTesting/R/BuyStrategies.R")
source("~/Develop/R/rBackTesting/R/SellStrategies.R")
source("~/Develop/R/rBackTesting/R/Win.R")
require(rChange)
require(rQuant)
require(tidyverse)
require(dplyr)
require(plyr)
require(odbc)
require(lubridate)
'%ni%' <- Negate('%in%')
connection <- DBI::dbConnect(odbc::odbc(), "cryptocompare")
#datA <- tbl(connection, "cryptocompare_histoDay")
datA <- tbl(connection, "binance_day")
datA %>% filter(time>1550644132) %>%  collect() -> dataHistorical
#datA %>%  filter(exchange == "Cryptopia", currency == "BTC") %>% distinct() %>% collect() -> dataHistorical
datA %>%  filter(exchange == "Binance", currency == "BTC") %>% distinct() %>% collect() -> dataHistorical
rQuant <- init_rQuant()
devtools::install_github("krzysztofpaliga/rQuant")
require(rQuant)
rQuant <- init_rQuant()
#data <- rQuant$bollingerBands$calculate(dataHistorical, 12, 1, TRUE)
data <- rQuant$candlesticks$calculate(dataHistorical)
asc <- function(a) {
allAsc <- TRUE
for (i in 1:(length(a)-1)) {
if(a[i] > a[i+1]) {
allAsc <- FALSE
}
}
return(allAsc)
}
data$ascSell <- rollapply(data$close, width=2, FUN = asc, fill = NA, align = "right")
data$ascBuy <- rollapply(data$close, width=3, FUN = asc, fill = NA, align = "right" )
data <- na.omit(data)
windowSize = 12
tradeBookCostRatio = 0
binStrategy <- binStrategies$distributingMeanBinStrategy
buyStrategy <- buyStrategies$cc$hammerBuyStrategy
sellStrategy <- sellStrategies$cc$hammerSellStrategy
numberOfBins = 34
initialInvestment = 1
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
transactionHistory <-
data_frame(
coin = character(),
amount = double(),
type = character()
)
wallet <- list()
wallet$reserveFund <- 0
wallet$currentlyHeldReturn <- 0
meanCN <- paste("avg", windowSize, sep="_")
bins <- binStrategy$initBins(numberOfBins, initialInvestment)
pointsInTime <- distinct(data, time) %>% ungroup() %>% distinct(time) %>% arrange()
pointsInTime <- distinct(data, time) %>% ungroup() %>% distinct(time) %>% arrange()
data %>% ungroup() %>% distinct(time) %>% arrange()
source('~/Develop/R/rBackTesting/R/Win.R', echo=TRUE)
distinct(data, time) %>% ungroup()
source('~/Develop/R/rBackTesting/R/Win.R', echo=TRUE)
distinct(data, time) %>% ungroup() %>% distinct()
distinct(data, time) %>% ungroup() %>% distinct() %>% arrange()
distinct(data, time) %>% ungroup() %>% distinct()
distinct(data, time) %>% ungroup() %>% distinct(time)
distinct(data, time) %>% ungroup() %>% distinct(time) %>% arrange()
distinct(data, time) %>% ungroup() %>% distinct(time)
distinct(data, time) %>% ungroup() %>% distinct(time) %>% arrange(time)
source('~/Develop/R/rBackTesting/R/Win.R')
source("~/Develop/R/rBackTesting/R/Win.R")
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
for (pointInTimeRowNumber in 1:nrow(pointsInTime)) {
#pointInTimeRowNumber = 521
print(paste("poin in time ", pointInTimeRowNumber))
print(paste("held investment ", sum(bins$investmentHeight)))
pointInTime <- pointsInTime[pointInTimeRowNumber, ]$time
dataAtPointInTime <- filter(data, time == pointInTime)
toBeSold <- sellStrategy$copyWhatIsToBeSold(dataAtPointInTime, bins, verbose = FALSE)
returned <- binStrategy$sell(toBeSold, bins = bins, wallet, transactionHistory, verbose = FALSE)
bins <- returned[[1]]
wallet <- returned[[2]]
transactionHistory <- returned[[3]]
returned <- binStrategy$adjustBins(bins, wallet)
bins <- returned[[1]]
wallet <- returned[[2]]
toBeBought <- buyStrategy$copyWhatIsTeBeBought(dataAtPointInTime = dataAtPointInTime, verbose = FALSE)
returned <- binStrategy$buy(toBeBought = toBeBought, bins = bins, wallet = wallet, transactionHistory = transactionHistory, verbose = FALSE)
bins <- returned[[1]]
wallet <- returned[[2]]
transactionHistory <- returned[[3]]
}
toBeSold <- sellStrategy$copyWhatIsToBeSold(dataAtPointInTime, bins, verbose = FALSE)
returned <- binStrategy$sell(toBeSold, bins = bins, wallet, transactionHistory, verbose = FALSE)
toBeBought <- buyStrategy$copyWhatIsTeBeBought(dataAtPointInTime = dataAtPointInTime, verbose = FALSE)
source('~/Develop/R/rBackTesting/R/BuyStrategies.R')
source('~/Develop/R/rBackTesting/R/BuyStrategies.R')
toBeBought <- buyStrategy$copyWhatIsTeBeBought(dataAtPointInTime = dataAtPointInTime, verbose = FALSE)
data <- na.omit(data)
windowSize = 12
tradeBookCostRatio = 0
binStrategy <- binStrategies$distributingMeanBinStrategy
buyStrategy <- buyStrategies$cc$hammerBuyStrategy
sellStrategy <- sellStrategies$cc$hammerSellStrategy
numberOfBins = 34
initialInvestment = 1
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
l
source("~/Develop/R/rBackTesting/R/BinStrategies.R")
source("~/Develop/R/rBackTesting/R/BuyStrategies.R")
source("~/Develop/R/rBackTesting/R/SellStrategies.R")
source("~/Develop/R/rBackTesting/R/Win.R")
require(rChange)
require(rQuant)
require(tidyverse)
require(dplyr)
require(plyr)
require(odbc)
require(lubridate)
'%ni%' <- Negate('%in%')
connection <- DBI::dbConnect(odbc::odbc(), "cryptocompare")
#datA <- tbl(connection, "cryptocompare_histoDay")
datA <- tbl(connection, "binance_day")
datA %>% filter(time>1550644132) %>%  collect() -> dataHistorical
#datA %>%  filter(exchange == "Cryptopia", currency == "BTC") %>% distinct() %>% collect() -> dataHistorical
datA %>%  filter(exchange == "Binance", currency == "BTC") %>% distinct() %>% collect() -> dataHistorical
datA %>% filter(time > 0) %>% collect()-> dataHistoricalF
rQuant <- init_rQuant()
#data <- rQuant$bollingerBands$calculate(dataHistorical, 12, 1, TRUE)
data <- rQuant$candlesticks$calculate(dataHistorical)
asc <- function(a) {
allAsc <- TRUE
for (i in 1:(length(a)-1)) {
if(a[i] > a[i+1]) {
allAsc <- FALSE
}
}
return(allAsc)
}
data$ascSell <- rollapply(data$close, width=2, FUN = asc, fill = NA, align = "right")
data$ascBuy <- rollapply(data$close, width=3, FUN = asc, fill = NA, align = "right" )
data <- na.omit(data)
windowSize = 12
tradeBookCostRatio = 0
binStrategy <- binStrategies$distributingMeanBinStrategy
buyStrategy <- buyStrategies$cc$hammerBuyStrategy
sellStrategy <- sellStrategies$cc$hammerSellStrategy
numberOfBins = 34
initialInvestment = 1
bins <- win(data = data,
windowSize = windowSize,
binStrategy = binStrategy,
buyStrategy = buyStrategy,
sellStrategy = sellStrategy,
tradeBookCostRatio = tradeBookCostRatio,
numberOfBins = numberOfBins,
initialInvestment = initialInvestment)
